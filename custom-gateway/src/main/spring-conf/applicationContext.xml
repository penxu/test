<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
     http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<context:property-placeholder
		location="classpath:database.properties,classpath:config.properties" />

	<!-- 配置数据源，使用阿里巴巴的druid数据源(也可以使用c3p0或者dbcp，druid的性能更好点 ) -->
	<bean id="dataSource" name="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<!-- 配置数据库连接参数,druid会根据url自动识别dialect和driverClass无须配置 -->
		<property name="driverClassName" value="${databaseDriverClassName}" />
		<property name="url" value="${databaseUrl}" />
		<property name="username" value="${databaseUsername}" />
		<property name="password" value="${databasePasswd}" />
		<!-- 初始化来连接大小 -->
		<property name="initialSize" value="5" />
		<!-- 连接池中使用的最大连接数量，在druid中相当于maxPoolSize -->
		<property name="maxActive" value="30" />
		<!-- 获取连接的最大等待时间，单位毫秒 -->
		<property name="maxWait" value="60000" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="true" />
	</bean>

	<!-- 慢SQL记录 *start* -->
	<bean id="statfilter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- 开启合并sql -->
		<property name="mergeSql" value="true" />
		<!-- 开启慢查询语句,1秒 -->
		<property name="slowSqlMillis" value="1000" />
		<property name="logSlowSql" value="true" />
	</bean>

	<bean id="logFilter" class="com.alibaba.druid.filter.logging.Log4jFilter">
		<!-- <property name="resultSetLogEnabled" value="false" /> -->
		<!-- <property name="statementExecutableSqlLogEnable" value="true" /> -->
	</bean>
	<!-- 慢SQL记录 *end* -->

	<bean id="daoutil" class="com.teamface.common.util.dao.DAOUtil">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>


	<!-- enable component scanning (beware that this does not enable mapper 
		scanning!) -->
	<!-- 多个包使用逗号分开 -->
	<context:component-scan base-package="com.teamface">
		<context:include-filter type="regex"
			expression="custom.service.*" />
		<context:include-filter type="regex"
			expression="common.dao.*" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- enable autowire -->
	<!-- 是对包进行扫描，实现注释驱动Bean定义，同时将bean自动注入容器中使用。即解决了@Controller标识的类的bean的注入和使用 -->
	<context:annotation-config />
	<!-- enable transaction demarcation with annotations -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<bean id="mailSenderDao" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="host" value="smtp.163.com" />
		<property name="port" value="25" />
		<property name="protocol" value="smtp" />
		<property name="username" value="dd@163.com" />
		<property name="password" value="5448" />

		<property name="javaMailProperties">
			<props>
				<!-- 163邮箱中的fromAddress必须与username一样,因此在这里加了这个(mail.fromAddress)自己的属性,公司的邮箱可以随意设定:any@cnlaunch.com -->
				<prop key="mail.fromAddress"></prop>
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.smtp.timeout">60000</prop>
				<prop key="mail.smtp.connectiontimeout">30000</prop>
				<!-- 起用这个ssl好象不成功 -->
				<!-- <prop key="mail.smtp.starttls.enable">true</prop> <prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop> -->
			</props>
		</property>
	</bean>

	<bean id="threadPoolTaskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
	</bean>

	<bean id="springContextUtil" class="com.teamface.common.util.SpringContextUtil" />

	<!--AOP类日志 -->
	<bean id="logAspect" class="com.teamface.common.util.LogAspect"></bean>
	<aop:config>
		<aop:aspect id="aspect" ref="logAspect">
			<!--对哪些方法进行日志记录，此处屏蔽action内的set get方法 -->
			<aop:pointcut id="logService"
				expression="(execution(* com.teamface.custom.controller..*.*(..)) )" />
			<aop:before pointcut-ref="logService" method="doBefore" />
			<aop:after pointcut-ref="logService" method="doAfter" />
			<aop:around pointcut-ref="logService" method="doAround" />
		</aop:aspect>
	</aop:config>


	<import resource="duboo-config.xml" />
	<import resource="custom/user-consumer.xml" />
	<import resource="custom/employee-consumer.xml" />
	<import resource="custom/moduleDataAuth-consumer.xml" />
	<import resource="custom/application-consumer.xml" />
	<import resource="custom/applicationCenter-consumer.xml" />
	<import resource="custom/applicationModuleUsed-consumer.xml" />
	<import resource="custom/modulePageAuth-consumer.xml" />
	<import resource="custom/custom-consumer.xml" />
	<import resource="custom/layout-consumer.xml" />
	<import resource="custom/module-consumer.xml" />
	<import resource="custom/moduleOperation-consumer.xml" />
	<import resource="custom/moduleDataShare-consumer.xml" />
	<import resource="custom/moduleSingleDataShareSetting-consumer.xml" />
	<import resource="custom/common-consumer.xml" />
	<import resource="custom/submenu-consumer.xml" />
	<import resource="custom/allot-consumer.xml" />
	<import resource="custom/fieldTransformation-consumer.xml" />
	<import resource="custom/colour-consumer.xml" />
	<import resource="custom/role-consumer.xml" />
	<import resource="custom/fieldRelyon-consumer.xml" />
	<import resource="custom/workflow-consumer.xml" />
	<import resource="custom/fileLibrary-consumer.xml" />
	<import resource="custom/moduleSeapool-consumer.xml" />
	<import resource="custom/email-consumer.xml" />
	<import resource="custom/center-consumer.xml" />
	<import resource="custom/report-consumer.xml" />
	<import resource="custom/print-consumer.xml" />
	<import resource="custom/memo-consumer.xml" />
	<import resource="custom/automation-consumer.xml" />
	<import resource="custom/instrumentPanel-consumer.xml" />
	<import resource="custom/moduleEmail-consumer.xml" />
	<import resource="custom/project-consumer.xml" />
    <import resource="custom/print-consumer.xml" />
    <import resource="custom/memo-consumer.xml" />
    <import resource="custom/automation-consumer.xml" />
    <import resource="custom/instrumentPanel-consumer.xml" />
    <import resource="custom/moduleEmail-consumer.xml" />
    <import resource="custom/project-consumer.xml" />
	<import resource="custom/print-consumer.xml" />
	<import resource="custom/memo-consumer.xml" />
	<import resource="custom/automation-consumer.xml" />
	<import resource="custom/instrumentPanel-consumer.xml" />
	<import resource="custom/moduleEmail-consumer.xml" />
	<import resource="custom/project-consumer.xml" />
	<import resource="custom/attendance-consumer.xml" />
</beans> 