<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee.xsd">
	<context:property-placeholder location="classpath:config.properties" />
	<!-- http://zac110.iteye.com/blog/1743879 -->
	<!-- http://www.iteye.com/problems/66133 -->
	<!-- http://icanfly.iteye.com/blog/778401 -->
	<!-- 如果没有<mvc:annotation-driven/>，那么所有的Controller可能就没有解析，所有当有请求时候都没有匹配的处理请求类， 就都去<mvc:default-servlet-handler/>即default servlet处理了。添加上<mvc:annotation-driven/>后，相应的do请 求被Controller处理，而静态资源因为没有相应的Controller就会被default servlet处理。总之没有相应的Controller就会被default servlet处理 -->
	<context:component-scan base-package="com.teamface.custom.controller" use-default-filters="false">
		<context:include-filter type="regex" expression=".manager.*" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- http://www.myexception.cn/vc-mfc/789978.html -->
	<!-- HandlerMapping BeanNameUrlHandlerMapping：表示将请求的URL和Bean名字映射，如URL为 “上下文/hello”，则Spring配置文件必须有一个名字为“/hello”的Bean，上下文默认忽略。 -->
	<!-- <bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"/> -->
	<!-- HandlerAdapter SimpleControllerHandlerAdapter：表示所有实现了org.springframework.web.servlet.mvc.Controller接口的Bean可以作为Spring Web MVC中的处理器。如果需要其他类型的处理器可以通过实现HadlerAdapter来解决。 -->
	<!--<bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"/> -->

	<!-- Configures the @Controller programming model -->
	<mvc:annotation-driven />

	<!-- Forwards requests to the "/" resource to the "welcome" view -->
	<mvc:view-controller path="/" view-name="login" />
	<mvc:view-controller path="/error/error" view-name="/error/error" />

	<!-- Configures Handler Interceptors -->
	<mvc:interceptors>
		<!-- Changes the locale when a 'locale' request parameter is sent; e.g. /?locale=de -->
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" />
	</mvc:interceptors>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
	<!-- <mvc:resources mapping="/resources/**" location="/resources/" /> -->
	<!-- <mvc:resources location="/,/WEB-INF/resourcesRoot/" mapping="/r/**" cache-period="10"/> -->

	<!-- 对静态资源文件的访问 方案一 （二选一）location 后面一定要有 / -->
	<!-- <mvc:resources mapping="/upload/*" location="/upload/" /> -->
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/img/**" location="/img/" />
	<mvc:resources mapping="/template/**" location="/template/" />
	<mvc:resources mapping="/tool/**" location="/tool/" />
	<mvc:resources mapping="favicon.ico" location="/favicon.ico" />

	<!-- <mvc:resources location="/WEB-INF/js/" mapping="/js/**" /> -->

	<!-- 对静态资源文件的访问 方案二 （二选一） <mvc:default-servlet-handler /> -->
	<mvc:default-servlet-handler />

	<!-- Saves a locale change using a cookie -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
		<property name="cookieName">
			<value>filestorageCookieLocale</value>
		</property>
		<property name="cookiePath">
			<value>/</value>
		</property>
		<property name="cookieMaxAge">
			<value>2147483647</value>
		</property>
	</bean>
   <mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/**" />
            <!-- <mvc:exclude-mapping path="/user/**"/> -->
            <bean class="com.teamface.custom.interceptor.RequestInterceptor" />
        </mvc:interceptor>
    </mvc:interceptors> 


	<!-- http://blog.csdn.net/lan861698789/article/details/8071127 -->
	<!-- http://www.ibm.com/developerworks/cn/java/j-lo-springview/ -->
	<!-- http://www.rickherrick.com/?q=node/63 -->
	<!-- http://www.myexception.cn/vc-mfc/1173935.html -->
	<!-- http://my.oschina.net/ethling/blog/138171 -->

	<!-- viewClass：JstlView表示JSP模板页面需要使用JSTL标签库，classpath中必须包含jstl的相关jar包； -->
	<!-- <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/> <property name="prefix" value="/WEB-INF/view/"/> <property name="suffix" value=".jsp"/> </bean> -->

	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<!-- 设置为true以忽略对Accept Header的支持 -->
		<property name="ignoreAcceptHeader" value="true" />
		<!-- 在没有扩展名时即: "/user/1" 时的默认展现形式 -->
		<property name="defaultContentType" value="text/html" />
		<!-- 扩展名至mimeType的映射,即 /user.json => application/json -->
		<property name="mediaTypes">
			<map>
				<entry key="json" value="application/json" />
				<entry key="xml" value="application/xml" />
			</map>
		</property>
		<!-- 用于开启 /userinfo/123?format=json 的支持 -->
		<property name="favorParameter" value="false" />
	</bean>

	<!-- 根据客户端的不同的请求决定不同的view进行响应, 如 /blog/1.json /blog/1.xml -->
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
		<property name="viewResolvers">
			<list>
				<!-- 这个可以同时使用吗？ <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" /> -->
				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
					<property name="prefix" value="/WEB-INF/view/" />
					<property name="suffix" value=".jsp" />
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<!-- <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" /> -->
				<bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView">
					<property name="charset" value="UTF8" />
					<property name="features">
						<list>
							<!-- <value>WriteMapNullValue</value> <value>QuoteFieldNames</value> -->
						</list>
					</property>
				</bean>
				<!-- for application/xml -->
				<!-- <bean class="org.springframework.web.servlet.view.xml.MarshallingView" > <property name="marshaller"> <bean class="org.springframework.oxm.xstream.XStreamMarshaller"/> </property> </bean> -->
			</list>
		</property>
	</bean>

	<!-- fastJson好象不起作用啊 避免IE执行AJAX时,返回JSON出现下载文件 -->
	<bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
		<property name="features">
			<list>
				<!-- <value>WriteMapNullValue</value> <value>QuoteFieldNames</value> -->
			</list>
		</property>
	</bean>
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="fastJsonHttpMessageConverter" /><!-- json转换器 -->
			</list>
		</property>
	</bean>

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="104857600" />
	</bean>

	<!-- jsp页面里面的异常，这里的配置好象无法拦截，因此在web.xml里面配置了,那下面的这个是否也要去掉 -->
	<!-- <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="defaultErrorView" value="error/error" />
		<property name="exceptionMappings">
			<props>
				<prop key="java.sql.SQLException">error/error</prop>
				<prop key="org.springframework.web.bind.ServletRequestBindingException">error/error</prop>参数绑定错误(如：必须参数没传递)
				<prop key="java.lang.IllegalArgumentException">error/error</prop>  参数错误
				<prop key="org.springframework.validation.BindException">error/error</prop>  参数类型有误
				<prop key="java.lang.RuntimeException">error/error</prop>
				<prop key="java.lang.Exception">error/error</prop>
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">/error/error</prop>
			</props>
		</property>
		<property name="statusCodes">
			<props>
				<prop key="error/error">4040404</prop>
				<prop key="error/error">500</prop>
			</props>
		</property>
		<property name="defaultStatusCode" value="500" />
	</bean> -->
</beans>